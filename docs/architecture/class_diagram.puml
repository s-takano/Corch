@startuml component     ' tell PlantUML "start in component-mode"
allow_mixing           

!define AZURE_COLOR      #0078D4
!define FUNCTION_COLOR   #FF6600
!define SERVICE_COLOR    #00AA44
!define INTERFACE_COLOR  #9933CC

title CorchEdges â€“ Azure Functions Architecture

cloud "Azure ServiceBus"        as ServiceBus    AZURE_COLOR
cloud "Azure Function Runtime"  as AzureFunction AZURE_COLOR
cloud "Microsoft Graph API"     as GraphAPI      AZURE_COLOR
cloud "Azure Blob Storage"      as BlobStorage   AZURE_COLOR

package "CorchEdges.Functions" FUNCTION_COLOR {
    class ReceiveSharePointChangeNotification {
        - ISharePointWebhookProcessor svc
        - ILogger<ReceiveSharePointChangeNotification> logger
        + record Out(string? BusMessage, HttpResponseData HttpResponse)
        + Run(HttpRequestData req): Task<Out>
    }

    class SharePointSyncFunction {
        - ILogger<SharePointSyncFunction> _log
        - SharePointSyncProcessor _processor
        - BlobContainerClient _failed
        + RunAsync(string msg): Task
    }

    class SharePointSubscriptionRegistrar {
        - WebhookRegistrar _webhookRegistrar
        - ILogger<SharePointSubscriptionRegistrar> _logger
        - IConfiguration _configuration
        + CreateSharePointSubscriptionAsync(HttpRequestData req): Task<HttpResponseData>
        + GetSharePointSubscriptionsAsync(HttpRequestData req): Task<HttpResponseData>
        + RenewSharePointSubscriptionsAsync(HttpRequestData req): Task<HttpResponseData>
        + DeleteSubscriptionAsync(HttpRequestData req, string subscriptionId): Task<HttpResponseData>
    }
}

package "CorchEdges.Services" SERVICE_COLOR {
    class DefaultSharePointWebhookProcessor {
        + TryHandshake(HttpRequestData req): HttpResponseData?
        + BuildEnqueueAsync(HttpRequestData req): Task<(HttpResponseData,string?)>
    }

    class SharePointSyncProcessor {
        - ILogger _log
        - IGraphApiClient _graphApiClient
        - ITabularDataParser _parser
        - IDatabaseWriter _db
        - EdgesDbContext _context
        - string _siteId
        - string _listId
        + EnsureGraphConnectionAsync(): Task<bool>
        + FetchAndStoreDeltaAsync(): Task
    }
    
    class WebhookRegistrar {
        + RegisterWebhookAsync(): Task<Subscription>
        + IsListMonitoredByWebhookAsync(): Task<bool>
        + GetListWebhookStatusAsync: Task<ListWebhookStatus>
        + IsSpecificWebhookRegisteredAsync(): Task<bool>
        + GetSubscriptionsForListAsync(): Task<IReadOnlyList<Subscription>>
        + GetActiveSubscriptionsAsync(): Task<IReadOnlyList<Subscription>>
        + RenewSubscriptionAsync(): Task<bool>
        + DeleteSubscriptionAsync(string subscriptionId): Task<bool>
        + GetExpiringSubscriptionsAsync(): Task<IReadOnlyList<Subscription>>
        + GetTestSubscriptionsAsync(string? testIdFilter = null): Task<IEnumerable<Subscription>>
        + CleanupTestSubscriptionsAsync(string? testIdFilter = null): Task<int>
    } 
}

package "CorchEdges.Abstractions" INTERFACE_COLOR {
    interface ISharePointWebhookProcessor {
        + TryHandshake(HttpRequestData req): HttpResponseData?
        + BuildEnqueueAsync(HttpRequestData req): Task<(HttpResponseData,string?)>
    }

    interface ITabularDataParser {
        + Parse(stream: Stream): (DataSet?,string?)
    }

    interface IGraphApiClient {
        + TestConnectionAsync(): Task<GraphResult>
        + GetListItemAsync(string siteId,string listId,string itemId): Task<ListItem?>
        + GetDriveItemAsync(string siteId,string listId,string itemId): Task<DriveItem?>
        + DownloadAsync(string driveId,string itemId): Task<Stream>
    }

    interface IDatabaseWriter {
        + WriteAsync(DataSet ds,EdgesDbContext ctx,IDbConnection cn,IDbTransaction tx): Task
    }
}

package "CorchEdges.Models" {
    class NotificationEnvelope {
        + ChangeNotification[] Value
    }

    class ChangeNotification {
        + string? Resource
        + string? ChangeType
        + string? ClientState
    }
}

ReceiveSharePointChangeNotification --> ISharePointWebhookProcessor
DefaultSharePointWebhookProcessor  ..|> ISharePointWebhookProcessor
SharePointSyncFunction  --> SharePointSyncProcessor
SharePointSyncFunction  --> NotificationEnvelope
SharePointSyncProcessor  --> IGraphApiClient
SharePointSyncProcessor  --> IExcelParser
SharePointSyncProcessor  --> IDatabaseWriter
SharePointSyncProcessor  --> ChangeNotification
SharePointSubscriptionRegistrar --> WebhookRegistrar
NotificationEnvelope     --> ChangeNotification

AzureFunction            --> ReceiveSharePointChangeNotification : HTTP Trigger
AzureFunction            --> SharePointSyncFunction   : ServiceBus Trigger
AzureFunction            --> SharePointSubscriptionRegistrar : HTTP Trigger
ServiceBus               --> SharePointSyncFunction
ReceiveSharePointChangeNotification --> ServiceBus               : enqueues
SharePointSyncProcessor  --> GraphAPI                  : calls
SharePointSyncFunction  --> BlobStorage               : logs failed

@enduml