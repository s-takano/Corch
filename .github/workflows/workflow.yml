# .github/workflows/func-linux-iso.yml
name: Build & deploy Azure Function

on:
  push:
    branches: [master] 
  workflow_dispatch:

permissions:
  id-token: write            
  contents: read

env:
  FUNC_APP: 'corch-edges'            
  DOTNET_VERSION: '8.0.x'

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      ConnectionStrings__TestDatabase: Host=localhost;Database=postgres;Username=postgres;Password=postgres
      # Provide EF design-time connection for migrations (used by EdgesDbContextFactory)
      ConnectionStrings__PostgreSQLConnection: Host=localhost;Port=5432;Database=postgres;Username=postgres;Password=postgres;Include Error Detail=true
      # Azure Graph API credentials for integration tests
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      # AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      # Azure Service Bus connection for integration tests
      ConnectionStrings__ServiceBusConnection: ${{ secrets.AZURE_SERVICEBUS_CONNECTION }}
      TEST_FUNCTION_KEY: ${{ secrets.TEST_FUNCTION_KEY }}
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER:     postgres
          POSTGRES_PASSWORD: postgres   
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Install dotnet-ef (align to EF Core 8)
      - name: Install dotnet-ef
        run: dotnet tool install --global dotnet-ef --version 8.*

      # ---------- Build ----------
      - run: dotnet restore
      - run: dotnet build -c Release --no-restore
      - run: dotnet publish -c Release -o ./publish

      # ---------- Tests ----------
      - name: Run Contract Tests
        run: dotnet test -c Release --no-build --filter "Category=Contract"

      - name: Run Unit Tests
        run: dotnet test -c Release --no-build --filter "Category=Unit"

      - name: Run Entity Tests
        run: dotnet test -c Release --no-build --filter "Category=Entity"

      - name: Run Functional Tests
        run: dotnet test -c Release --no-build --filter "Category=Functional"

      # ---------- Azure auth via OIDC just before the integration tests ----------
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id:        ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:        ${{ secrets.AZURE_TENANT_ID }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure login
        run: |
          echo "Current Azure account:"
          az account show --query "name" --output tsv
          echo "Login verification: $(az account show --query "state" --output tsv)"

      - name: Run PostgreSQL Integration Tests
        run: dotnet test -c Release --no-build --filter "Category=Integration&Require=PostgreSQL"

      - name: Run Azure Graph API Integration Tests
        run: dotnet test -c Release --no-build --filter "Category=Integration&Requires=AzureGraphApi"

      - name: Run Azure Service Bus Integration Tests
        run: dotnet test -c Release --no-build --filter "Category=Integration&Requires=AzureServiceBus"

      - name: Run End-to-End Tests
        run: dotnet test -c Release --no-build --filter "Category=EndToEnd"

      # ---------- Generate idempotent migration script ----------
      - name: Generate idempotent EF Core migration script
        working-directory: src/CorchEdges
        run: |
          mkdir -p artifacts
          dotnet ef migrations list --context EdgesDbContext --project . --startup-project .
          dotnet ef migrations script --idempotent --context EdgesDbContext --project . --startup-project . --output artifacts/migrations.sql

      - name: Upload migration script artifact
        uses: actions/upload-artifact@v4
        with:
          name: migrations-sql
          path: src/CorchEdges/artifacts/migrations.sql

      # ---------- Apply migrations to target DB (optional; requires secrets) ----------
      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Check DB secrets availability
        id: check-db-secrets
        env:
          PGHOST:     ${{ secrets.PGHOST }}
          PGPORT:     ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGUSER:     ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
        run: |
          has_all=true
          [ -z "${PGHOST}" ] && has_all=false
          [ -z "${PGDATABASE}" ] && has_all=false
          [ -z "${PGUSER}" ] && has_all=false
          [ -z "${PGPASSWORD}" ] && has_all=false
          echo "apply=${has_all}" >> "$GITHUB_OUTPUT"

      - name: Apply migrations to database
        if: ${{ steps.check-db-secrets.outputs.apply == 'true' }}
        working-directory: src/CorchEdges
        env:
          PGHOST:     ${{ secrets.PGHOST }}
          PGPORT:     ${{ secrets.PGPORT || '5432' }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGUSER:     ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
        run: |
          echo "SET lock_timeout = '5s'; SET statement_timeout = '5min';" | psql "sslmode=require"
          psql "sslmode=require" -v ON_ERROR_STOP=1 -f artifacts/migrations.sql

      # ---------- Deploy ----------
      - uses: Azure/functions-action@v1
        with:
          app-name:   corch-edges
          package:    ./publish
