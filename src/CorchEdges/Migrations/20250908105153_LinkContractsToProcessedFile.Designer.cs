// <auto-generated />
using System;
using CorchEdges.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CorchEdges.Migrations
{
    [DbContext(typeof(EdgesDbContext))]
    [Migration("20250908105153_LinkContractsToProcessedFile")]
    partial class LinkContractsToProcessedFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractCreation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountManager")
                        .HasColumnType("text")
                        .HasColumnName("上司報告者");

                    b.Property<decimal?>("ApartmentInsurance")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("アパート保険代");

                    b.Property<DateOnly?>("ApplicationDate")
                        .HasColumnType("date")
                        .HasColumnName("入居申込日");

                    b.Property<decimal?>("BicycleRegistrationFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("自転車登録事務手数料");

                    b.Property<decimal?>("BrokerageCommission")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("広告料");

                    b.Property<decimal?>("BrokerageFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("仲介手数料");

                    b.Property<DateOnly?>("ContractDate")
                        .HasColumnType("date")
                        .HasColumnName("契約日");

                    b.Property<string>("ContractId")
                        .HasColumnType("text")
                        .HasColumnName("契約ID");

                    b.Property<string>("ContractStatus")
                        .HasColumnType("text")
                        .HasColumnName("契約ステータス");

                    b.Property<string>("ContractorName")
                        .HasColumnType("text")
                        .HasColumnName("契約者名");

                    b.Property<int?>("ContractorNo")
                        .HasColumnType("integer")
                        .HasColumnName("契約者1No");

                    b.Property<decimal?>("DocumentStampFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("用紙印紙代");

                    b.Property<decimal?>("GuaranteeFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("保証料");

                    b.Property<decimal?>("InternetApplicationFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("インターネット申込金");

                    b.Property<DateOnly?>("KeyHandoverDate")
                        .HasColumnType("date")
                        .HasColumnName("鍵引渡日");

                    b.Property<decimal?>("KeyMoney")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("礼金_家");

                    b.Property<decimal?>("KeyReplacementFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("鍵交換費");

                    b.Property<string>("LeadSource")
                        .HasColumnType("text")
                        .HasColumnName("販路");

                    b.Property<string>("LeadSourceDetail")
                        .HasColumnType("text")
                        .HasColumnName("販路その他");

                    b.Property<decimal?>("MaximumAmount")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("極度額");

                    b.Property<decimal?>("MotorcycleRegistrationFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("バイク登録事務手数料");

                    b.Property<DateOnly?>("MoveInDate")
                        .HasColumnType("date")
                        .HasColumnName("入居予定日");

                    b.Property<DateTime?>("OutputDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("出力日時");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ProgressStatus")
                        .HasColumnType("text")
                        .HasColumnName("進捗管理ステータス");

                    b.Property<string>("PropertyName")
                        .HasColumnType("text")
                        .HasColumnName("物件名");

                    b.Property<int?>("PropertyNo")
                        .HasColumnType("integer")
                        .HasColumnName("物件No");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("integer")
                        .HasColumnName("部屋No");

                    b.Property<decimal?>("SecurityDeposit")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("敷金_家");

                    b.Property<DateOnly?>("SupervisorApprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("上司確認日");

                    b.Property<decimal?>("WithdrawalFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("引落手数料");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedFileId");

                    b.ToTable("contract_creation", "corch_edges_raw");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractCurrent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AC")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("AC");

                    b.Property<decimal?>("BicycleFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("自転車");

                    b.Property<DateOnly?>("CancellationDate")
                        .HasColumnType("date")
                        .HasColumnName("解約日");

                    b.Property<string>("ContractId")
                        .HasColumnType("text")
                        .HasColumnName("契約ID");

                    b.Property<DateOnly?>("ContractRevisionDate")
                        .HasColumnType("date")
                        .HasColumnName("契約改定日");

                    b.Property<DateOnly?>("ContractStartDate")
                        .HasColumnType("date")
                        .HasColumnName("契約開始日");

                    b.Property<string>("ContractStatus")
                        .HasColumnType("text")
                        .HasColumnName("契約状態");

                    b.Property<string>("ContractTypeName")
                        .HasColumnType("text")
                        .HasColumnName("契約分類名");

                    b.Property<string>("ContractorAddress")
                        .HasColumnType("text")
                        .HasColumnName("契約者_住所");

                    b.Property<DateOnly?>("ContractorBirthDate")
                        .HasColumnType("date")
                        .HasColumnName("契約者_生年月日");

                    b.Property<string>("ContractorEmail")
                        .HasColumnType("text")
                        .HasColumnName("契約者_メールアドレス");

                    b.Property<string>("ContractorEmployer")
                        .HasColumnType("text")
                        .HasColumnName("契約者_勤務先名");

                    b.Property<string>("ContractorEmployerPhone")
                        .HasColumnType("text")
                        .HasColumnName("契約者_勤務先電話番号");

                    b.Property<string>("ContractorGender")
                        .HasColumnType("text")
                        .HasColumnName("契約者_性別");

                    b.Property<string>("ContractorKana")
                        .HasColumnType("text")
                        .HasColumnName("契約者_カナ");

                    b.Property<string>("ContractorMobileNumber")
                        .HasColumnType("text")
                        .HasColumnName("契約者_携帯電話番号");

                    b.Property<string>("ContractorName")
                        .HasColumnType("text")
                        .HasColumnName("契約者_名");

                    b.Property<int?>("ContractorNo")
                        .HasColumnType("integer")
                        .HasColumnName("契約者1No");

                    b.Property<string>("ContractorPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("契約者_電話番号");

                    b.Property<string>("ContractorPostalCode")
                        .HasColumnType("text")
                        .HasColumnName("契約者_郵便番号");

                    b.Property<string>("CorporateContract")
                        .HasColumnType("text")
                        .HasColumnName("法人契約");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("期日");

                    b.Property<decimal?>("ElectricityFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("電気");

                    b.Property<string>("EmergencyContactAddress")
                        .HasColumnType("text")
                        .HasColumnName("緊急連絡先_住所");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("text")
                        .HasColumnName("緊急連絡先_名");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("緊急連絡先_電話番号");

                    b.Property<string>("EmergencyContactPostalCode")
                        .HasColumnType("text")
                        .HasColumnName("緊急連絡先_郵便番号");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasColumnType("text")
                        .HasColumnName("緊急連絡先_続柄");

                    b.Property<bool?>("FixedTermLease")
                        .HasColumnType("boolean")
                        .HasColumnName("定期借家");

                    b.Property<decimal?>("GasDeposit")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("ガス保証金");

                    b.Property<string>("GuaranteeCompanyId")
                        .HasColumnType("text")
                        .HasColumnName("保証会社ID");

                    b.Property<string>("GuaranteeCompanyName")
                        .HasColumnType("text")
                        .HasColumnName("保証会社名");

                    b.Property<int?>("GuaranteeCompanyNo")
                        .HasColumnType("integer")
                        .HasColumnName("保証会社No");

                    b.Property<string>("GuarantorAddress")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_住所");

                    b.Property<string>("GuarantorEmail")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_メールアドレス");

                    b.Property<string>("GuarantorEmployer")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_勤務先名");

                    b.Property<string>("GuarantorEmployerPhone")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_勤務先電話番号");

                    b.Property<string>("GuarantorName")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_名");

                    b.Property<string>("GuarantorPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_電話番号");

                    b.Property<string>("GuarantorPostalCode")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_郵便番号");

                    b.Property<string>("GuarantorRelationship")
                        .HasColumnType("text")
                        .HasColumnName("連帯保証人1_続柄");

                    b.Property<decimal?>("HotWaterFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("給湯");

                    b.Property<decimal?>("ManagementFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("管理費");

                    b.Property<decimal?>("MotorcycleFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("バイク");

                    b.Property<DateOnly?>("MoveInDate")
                        .HasColumnType("date")
                        .HasColumnName("入居日_新規契約開始日");

                    b.Property<int?>("NoticeInDays")
                        .HasColumnType("integer")
                        .HasColumnName("予告");

                    b.Property<DateTime?>("OutputDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("出力日時");

                    b.Property<decimal?>("ParkingFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("駐車料");

                    b.Property<string>("Pet")
                        .HasColumnType("text")
                        .HasColumnName("ペット");

                    b.Property<decimal?>("PhoneFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("電話");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyName")
                        .HasColumnType("text")
                        .HasColumnName("物件名");

                    b.Property<int?>("PropertyNo")
                        .HasColumnType("integer")
                        .HasColumnName("物件No");

                    b.Property<decimal?>("RC")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("RC");

                    b.Property<string>("Remarks1")
                        .HasColumnType("text")
                        .HasColumnName("備考1");

                    b.Property<string>("Remarks2")
                        .HasColumnType("text")
                        .HasColumnName("備考2");

                    b.Property<DateOnly?>("RenewalEndDate")
                        .HasColumnType("date")
                        .HasColumnName("更新契約終期");

                    b.Property<decimal?>("RenewalManagementFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("更新後管理費");

                    b.Property<decimal?>("RenewalParkingFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("更新後駐車料");

                    b.Property<decimal?>("RenewalRent")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("更新後家賃");

                    b.Property<DateOnly?>("RenewalStartDate")
                        .HasColumnType("date")
                        .HasColumnName("更新契約始期");

                    b.Property<decimal?>("Rent")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("家賃");

                    b.Property<string>("ResidentCode")
                        .HasColumnType("text")
                        .HasColumnName("入居者コード");

                    b.Property<string>("ResidentName")
                        .HasColumnType("text")
                        .HasColumnName("入居者1_名");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("integer")
                        .HasColumnName("部屋No");

                    b.Property<string>("RoomType")
                        .HasColumnType("text")
                        .HasColumnName("部屋分類");

                    b.Property<decimal?>("SecurityDeposit")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("敷金_家");

                    b.Property<decimal?>("WaterFee")
                        .HasColumnType("numeric(12,0)")
                        .HasColumnName("水道");

                    b.Property<string>("WelfareRecipient")
                        .HasColumnType("text")
                        .HasColumnName("生活保護");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedFileId");

                    b.ToTable("contract_current", "corch_edges_raw");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractRenewal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractId")
                        .HasColumnType("text")
                        .HasColumnName("契約ID");

                    b.Property<DateOnly?>("ContractRenewalDate")
                        .HasColumnType("date")
                        .HasColumnName("契約更新日");

                    b.Property<string>("ContractorName")
                        .HasColumnType("text")
                        .HasColumnName("契約者_名");

                    b.Property<int?>("ContractorNo")
                        .HasColumnType("integer")
                        .HasColumnName("契約者1No");

                    b.Property<DateOnly?>("NextContractEndDate")
                        .HasColumnType("date")
                        .HasColumnName("次契約終期");

                    b.Property<DateOnly?>("NextContractStartDate")
                        .HasColumnType("date")
                        .HasColumnName("次契約始期");

                    b.Property<DateTime?>("OutputDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("出力日時");

                    b.Property<DateOnly?>("PreviousContractEndDate")
                        .HasColumnType("date")
                        .HasColumnName("前契約終期");

                    b.Property<DateOnly?>("PreviousContractStartDate")
                        .HasColumnType("date")
                        .HasColumnName("前契約始期");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ProgressStatus")
                        .HasColumnType("text")
                        .HasColumnName("進捗管理ステータス");

                    b.Property<string>("PropertyName")
                        .HasColumnType("text")
                        .HasColumnName("物件名");

                    b.Property<int?>("PropertyNo")
                        .HasColumnType("integer")
                        .HasColumnName("物件No");

                    b.Property<DateOnly?>("RenewalDate")
                        .HasColumnType("date")
                        .HasColumnName("更新日");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("integer")
                        .HasColumnName("部屋No");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedFileId");

                    b.ToTable("contract_renewal", "corch_edges_raw");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractTermination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ActualMoveOutDate")
                        .HasColumnType("date")
                        .HasColumnName("_転出日");

                    b.Property<DateOnly?>("ApplicationDate")
                        .HasColumnType("date")
                        .HasColumnName("_受付日");

                    b.Property<DateOnly?>("ChangeMonth")
                        .HasColumnType("date")
                        .HasColumnName("変更月");

                    b.Property<string>("ConstructionNumber")
                        .HasColumnType("text")
                        .HasColumnName("工事No");

                    b.Property<string>("ContractId")
                        .HasColumnType("text")
                        .HasColumnName("契約ID");

                    b.Property<string>("ContractorName")
                        .HasColumnType("text")
                        .HasColumnName("契約者_名");

                    b.Property<int?>("ContractorNo")
                        .HasColumnType("integer")
                        .HasColumnName("契約者1No");

                    b.Property<DateOnly?>("DocumentScanDate")
                        .HasColumnType("date")
                        .HasColumnName("書類スキャン日");

                    b.Property<DateOnly?>("FinalApprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("最終決裁日");

                    b.Property<DateOnly?>("MeetingDate")
                        .HasColumnType("date")
                        .HasColumnName("打合せ日");

                    b.Property<DateOnly?>("MoveOutInspectionDate")
                        .HasColumnType("date")
                        .HasColumnName("転出点検日");

                    b.Property<string>("MoveOutInspector")
                        .HasColumnType("text")
                        .HasColumnName("転出点検者");

                    b.Property<DateOnly?>("NotificationReceiptDate")
                        .HasColumnType("date")
                        .HasColumnName("届受取日");

                    b.Property<DateTime?>("OutputDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("出力日時");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ProgressStatus")
                        .HasColumnType("text")
                        .HasColumnName("進捗管理ステータス");

                    b.Property<string>("PropertyName")
                        .HasColumnType("text")
                        .HasColumnName("物件名");

                    b.Property<int?>("PropertyNo")
                        .HasColumnType("integer")
                        .HasColumnName("物件No");

                    b.Property<DateOnly?>("ProrationDate")
                        .HasColumnType("date")
                        .HasColumnName("_日割日");

                    b.Property<DateOnly?>("ReverseChargePaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("逆請求入金日");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("integer")
                        .HasColumnName("部屋No");

                    b.Property<string>("RoomType")
                        .HasColumnType("text")
                        .HasColumnName("部屋分類");

                    b.Property<DateOnly?>("ScheduledMoveOutDate")
                        .HasColumnType("date")
                        .HasColumnName("_転出予定日");

                    b.Property<DateOnly?>("SettlementCreationDate")
                        .HasColumnType("date")
                        .HasColumnName("精算書作成日");

                    b.Property<string>("SettlementCreator")
                        .HasColumnType("text")
                        .HasColumnName("精算書作成者");

                    b.Property<DateOnly?>("SettlementPaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("精算金送金日");

                    b.Property<string>("SettlementSender")
                        .HasColumnType("text")
                        .HasColumnName("精算書送付者");

                    b.Property<DateOnly?>("SettlementSentDate")
                        .HasColumnType("date")
                        .HasColumnName("精算書送付日");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedFileId");

                    b.ToTable("contract_termination", "corch_edges_raw");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ProcessedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("file_name");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("RecordCount")
                        .HasColumnType("integer")
                        .HasColumnName("record_count");

                    b.Property<string>("SharePointItemId")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("share_point_item_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("processed_file", "corch_edges_raw");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ProcessingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeltaLink")
                        .HasMaxLength(2000)
                        .HasColumnType("text")
                        .HasColumnName("delta_link");

                    b.Property<int>("FailedItems")
                        .HasColumnType("integer")
                        .HasColumnName("failed_runs");

                    b.Property<string>("LastError")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("last_error");

                    b.Property<DateTime>("LastProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_processed_at");

                    b.Property<int>("LastProcessedCount")
                        .HasColumnType("integer")
                        .HasColumnName("last_processed_count");

                    b.Property<string>("ListId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("list_id");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("site_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subscription_id");

                    b.Property<int>("SuccessfulItems")
                        .HasColumnType("integer")
                        .HasColumnName("successful_runs");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("LastProcessedAt")
                        .HasDatabaseName("IX_processing_log_last_processed_at");

                    b.HasIndex("ListId")
                        .HasDatabaseName("IX_processing_log_list_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("IX_processing_log_site_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_processing_log_status");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("IX_processing_log_subscription_id");

                    b.ToTable("processing_log", "corch_edges_raw");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractCreation", b =>
                {
                    b.HasOne("CorchEdges.Data.Entities.ProcessedFile", "ProcessedFile")
                        .WithMany("ContractCreations")
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedFile");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractCurrent", b =>
                {
                    b.HasOne("CorchEdges.Data.Entities.ProcessedFile", "ProcessedFile")
                        .WithMany("ContractCurrents")
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedFile");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractRenewal", b =>
                {
                    b.HasOne("CorchEdges.Data.Entities.ProcessedFile", "ProcessedFile")
                        .WithMany("ContractRenewals")
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedFile");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ContractTermination", b =>
                {
                    b.HasOne("CorchEdges.Data.Entities.ProcessedFile", "ProcessedFile")
                        .WithMany("ContractTerminations")
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedFile");
                });

            modelBuilder.Entity("CorchEdges.Data.Entities.ProcessedFile", b =>
                {
                    b.Navigation("ContractCreations");

                    b.Navigation("ContractCurrents");

                    b.Navigation("ContractRenewals");

                    b.Navigation("ContractTerminations");
                });
#pragma warning restore 612, 618
        }
    }
}
